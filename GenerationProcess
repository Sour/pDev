1 . First I set the number of cells I want to generate, say 150. This is an arbitrary amount really, but the higher the number the larger the dungeon and in general more complexity.

2 . For each "cell" I spawn a Rectangle of random width and length within some radius. Again the radius doesn't matter too much, but it should probably be proportionate to the number of cells.
    Instead of using uniformly distributed random numbers (the default Math.random generator in most languages), I'm using Park-Miller Normal Distribution[1] . 
    This skews the size of the cells so that they are more likely to be of a small size (more smaller cells, less larger cells). The reason for this will be explained later!
    In addition to this I ensure that the ratio between the width and length of each cell is not too large, we don't want perfectly square rooms but neither do we want really skinny ones, but somewhere in between.

3 . At this point we have 150 random cells in a small area, most are overlapping. Next we use simple separation steering behaviour to separate out all of the rectangles so that none are overlapping. 
    This technique ensures that the cells are not overlapping, yet in general remain as tightly packed together as possible.
    Possible use of Inverse Square Law[4] for seperation
    
    For each Rectangle
    Solve[
        Find new coÃ¶rdinates for the rectangle
        Minimizing the distance to the geometric center of the image
        Taking in account that
            Distance between centers > l1->l2 | w1->w2 *for all other rectangle
            Move the rectangle in a line between its center and the geometric center of the drawing
   ]
   
   
    
4 . We fill in any gaps with 1x1 sized cells. The result is that we end up with a square grid of differently sized cells, all perfectly packed together. (90x90)

5 . Here is where the fun begins. We determine which of the cells in the grid are rooms - any cell with a width and height above a certain threshold is made into a room. Because of the Park-Miller Normal Distribution described earlier, 
    there will only be a small amount of rooms in comparison to the number of cells, with lots of space between. The remaining cells are still useful however... read on.

6 . For the next stage we want to link each room together. To begin we construct a graph of all of the rooms' center points using Delaunay Triangulation[2] . So now all rooms are connected to each other without intersecting lines.

7 . Because we don't want every single room to be linked to every other with a corridor (that would make for a very confusing layout), we then construct a Minimal Spanning Tree[3] using the previous graph. 
    This creates a graph that guarantees all rooms are connected (and therefore reachable in the game).

8 . The minimal spanning tree looks nice, but again is a boring dungeon layout because it contains no loops, it is the other extreme to the Delaunay Triangulation. 
    So now we re-incorporate a small number of edges from the triangulated graph (say 15% of the remaining edges after the minimal spanning tree has been created). 
    The final layout will therefore be a graph of all rooms, each guaranteed to be reachable and containing some loops for variety.

9 . To convert the graph to corridors, for each edge we construct a series of straight lines (or L shapes) going from each room of the graph to its neighbour. 
    This is where the cells we have not yet used (those cells in the grid which are not rooms) become useful. Any cells which intersect with the L shapes become corridor tiles. 
    Because of the variety in cell sizes, the walls of the corridors will be twisty and uneven, perfect for a dungeon.


Here's a step-by-step guide to create a tilemap in Unity 2D with scripts:

Create a new Unity 2D project.

In the Assets panel, right-click and select Create > Folder. Rename the folder to "Tilemap".

In the Tilemap folder, right-click and select Create > Tile. Rename the Tile to "GroundTile".

Double-click the GroundTile to open it in the Tile Editor.

In the Tile Editor, click on the "Add Component" button and select "Sprite Renderer".

In the Sprite Renderer component, click on the "Sprite" field and select the sprite that you want to use for the ground tile.

Save the GroundTile by going to File > Save Assets.

In the Assets panel, right-click on the Tilemap folder and select Create > Tilemap.

In the Tilemap GameObject, add a Grid component by clicking the "Add Component" button and selecting "Grid".

In the Tilemap GameObject, add a Tilemap Renderer component by clicking the "Add Component" button and selecting "Tilemap Renderer".

In the Tilemap GameObject, add a Tilemap Collider 2D component by clicking the "Add Component" button and selecting "Tilemap Collider 2D".

Create a new script in the Assets panel by right-clicking and selecting Create > C# Script. Rename the script to "TilemapGenerator".

Open the TilemapGenerator script in Visual Studio.

In the TilemapGenerator script, add the following code:

csharp
Copy code
using UnityEngine;
using UnityEngine.Tilemaps;

public class TilemapGenerator : MonoBehaviour
{
    public Tilemap tilemap;
    public TileBase groundTile;

    private void Start()
    {
        for (int x = tilemap.cellBounds.xMin; x < tilemap.cellBounds.xMax; x++)
        {
            for (int y = tilemap.cellBounds.yMin; y < tilemap.cellBounds.yMax; y++)
            {
                Vector3Int tilePosition = new Vector3Int(x, y, 0);
                tilemap.SetTile(tilePosition, groundTile);
            }
        }
    }
}
In the Unity Editor, select the Tilemap GameObject and in the Inspector panel, drag the GroundTile from the Assets panel to the "Ground Tile" field in the TilemapGenerator script.

In the Unity Editor, select the Tilemap GameObject and in the Inspector panel, drag the Tilemap component to the "Tilemap" field in the TilemapGenerator script.

Save the scene and press the Play button to test the tilemap.

This is a basic example of how to create a tilemap in Unity 2D with scripts. You can expand on this by adding more tiles, creating a custom inspector, or generating the tilemap procedurally based on certain conditions.


[1] - https://en.wikipedia.org/wiki/Normal_distribution
[2] - http://en.wikipedia.org/wiki/Delaunay_triangulation
[3] - http://en.wikipedia.org/wiki/Minimum_spanning_tree
[4] - http://en.wikipedia.org/wiki/Inverse-square_law
